package com.example.soundmood.ui.moodplaylistgenerated

import android.util.Log
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.soundmood.data.AddTracksRequest
import com.example.soundmood.data.PlaylistRequest
import com.example.soundmood.data.PreferenceViewModel
import com.example.soundmood.data.TracksItem
import com.example.soundmood.network.ApiConfig
import kotlinx.coroutines.flow.firstOrNull
import kotlinx.coroutines.launch
import okhttp3.internal.notify

class MoodPlaylistGeneratedViewModel(private val preferenceViewModel: PreferenceViewModel) : ViewModel() {
    private val _musicList = MutableLiveData<String>()
    val musicList : LiveData<String> = _musicList

    private val _tracks = MutableLiveData<List<TracksItem>>()
    val tracks : LiveData<List<TracksItem>> = _tracks

    private val _spotifyPlaylistId = MutableLiveData<String>()
    val spotifyPlaylistId : LiveData<String> = _spotifyPlaylistId

    private val _errorMessage = MutableLiveData<String>()
    val errorMessage : LiveData<String> = _errorMessage

    private val _loading = MutableLiveData<Boolean>()
    val loading : LiveData<Boolean> = _loading

    companion object{
        const val TAG = "MoodPlaylistGeneratedViewModel"
    }

    suspend fun setMusicList(musicList : List<String>){
        val musicListString = musicList.joinToString(",")
        _musicList.value = musicListString
        fetchMusicDetail(musicListString)
    }

    fun createSpotifyPlaylist(userId: String?, playlistName: String) {
        viewModelScope.launch {
            try {
                _loading.value = true
                val requestBody = PlaylistRequest(
                    name = playlistName,
                    description =  "Generated by Sound Mood App",
                    public =  false
                )
                val accessToken = preferenceViewModel.accsessToken.firstOrNull()

                val response = ApiConfig.getApiService().createPlaylist(
                    appToken = "Bearer $accessToken",
                    userId = userId,
                    playlistRequest = requestBody
                )

                if (response.isSuccessful) {
                    _loading.value = false
                    val playlistId = response.body()?.id ?: ""
                    _spotifyPlaylistId.value = (playlistId)
                } else {
                    _loading.value = false
                    _errorMessage.value = ("Failed to create playlist: ${response.message()}")
                    Log.e(TAG, "Failed to create playlist: ${response.message()}")
                    Log.e(TAG, "Response Code: ${response.code()}")
                    Log.e(TAG, "Response Body: ${response.errorBody()?.string()}")
                }
            } catch (e: Exception) {
                _loading.value = false
                _errorMessage.value = ("Error: ${e.message}")
                Log.e(TAG, "Exception: ${e.message}", e)
            }
        }
    }

    private suspend fun fetchMusicDetail(musicListString: String) {
        val accessToken = preferenceViewModel.accsessToken.firstOrNull().toString()
        try {
            _loading.value = true
            val response = ApiConfig.getApiService().getTracks("Bearer $accessToken",musicListString)
            if(response.isSuccessful && response.body() !=null){
                _loading.value = false
                val trackList = response.body()?.tracks?.filterNotNull()?: emptyList()
                Log.d(TAG,"$trackList")
                _tracks.value = trackList
            }

        }catch (e:Exception){
            _loading.value = false
            Log.e(TAG,"Error message : ${e.message}")
        }
    }

    fun addTracksToPlaylist(playlistId: String, trackUris: List<String?>) {
        viewModelScope.launch {
            try {
                _loading.value = true
                val accessToken = preferenceViewModel.accsessToken.firstOrNull()
                val authHeader = "Bearer $accessToken"

                val addTracksRequest = AddTracksRequest(uris = trackUris)

                val response = ApiConfig.getApiService().addTracksToPlaylist(authHeader, playlistId, addTracksRequest)
                if (!response.isSuccessful) {
                    _loading.value = false
                    _errorMessage.value = "Failed to add tracks: ${response.message()}"
                }
            } catch (e: Exception) {
                _loading.value = false
                _errorMessage.value = "Error: ${e.message}"
            }
        }
    }


}